import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';
import { ApiService } from '../../shared/api.service';

interface WaterMeterRecord {
  roomId: number;
  meterValue: number;
  recordDate: string;
}

@Component({
  selector: 'app-water-meter',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './water-meter.component.html',
  styleUrls: ['./water-meter.component.css'],
})
export class WaterMeterComponent implements OnInit {
  waterMeterForm: FormGroup;
  rooms: any[] = [];
  today = new Date().toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' });
  date = new Date().toISOString().slice(0, 10);

  pendingData: WaterMeterRecord[] = []; // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå

  constructor(private fb: FormBuilder, private apiService: ApiService) {
    this.waterMeterForm = this.fb.group({});
  }

  ngOnInit(): void {
    this.fetchRooms();
  }

  fetchRooms(): void {
    this.apiService.getRooms().subscribe((data) => {
      this.rooms = data;
      this.initializeForm();
    });
  }

  initializeForm(): void {
    this.waterMeterForm = this.fb.group(
      this.rooms.reduce((acc, room, i) => {
        acc[`room${i}`] = [''];
        return acc;
      }, {})
    );
  }

  /**
   * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô `pendingData` ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
   */
  updatePendingData(index: number): void {
    const rawData = this.waterMeterForm.value;
    const room = this.rooms[index];
    const newValue = rawData[`room${index}`];

    if (room && newValue.trim() !== '') {
      const updatedData: WaterMeterRecord = {
        roomId: room.id,
        meterValue: Number(newValue),
        recordDate: this.date,
      };

      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Index ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const existingIndex = this.pendingData.findIndex((item) => item.roomId === updatedData.roomId);
      if (existingIndex === -1) {
        this.pendingData.push(updatedData);
      } else {
        this.pendingData[existingIndex] = updatedData;
      }
      console.log('üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:', this.pendingData);
    }
  }

  /**
   * ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î `Enter` ‡πÉ‡∏´‡πâ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏¢‡∏±‡∏á Input ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  handleEnter(event: Event, index: number): void {
    const keyboardEvent = event as KeyboardEvent;
    keyboardEvent.preventDefault();

    const nextIndex = index + 1;
    if (nextIndex < this.rooms.length) {
      setTimeout(() => {
        const nextInput = document.getElementById(`room${nextIndex}`) as HTMLInputElement;
        if (nextInput) {
          nextInput.focus();
        }
      }, 100);
    }
  }

  /**
   * ‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° `Submit` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API
   */
  submitWaterMeter(): void {
    if (this.pendingData.length > 0) {
      console.log('üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API:', JSON.stringify(this.pendingData, null, 2));

      this.apiService.saveWaterMeterData(this.pendingData).subscribe(
        (response) => {
          console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response);
          alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
          this.pendingData = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
          this.waterMeterForm.reset(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        },
        (error) => {
          console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
          alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
      );
    } else {
      alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
    }
  }
}
