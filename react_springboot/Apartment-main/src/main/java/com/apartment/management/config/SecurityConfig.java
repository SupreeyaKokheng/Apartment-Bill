package com.apartment.management.config;

import java.util.Arrays;
import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import com.apartment.management.repository.UserRepository;
import com.apartment.management.service.JwtService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final UserRepository userRepository;
    private final JwtService jwtService;

    public SecurityConfig(UserRepository userRepository, JwtService jwtService) {
        this.userRepository = userRepository;
        this.jwtService = jwtService;
    }

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î UserDetailsService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Authentication
    @Bean
    public UserDetailsService userDetailsService() {
        return username -> {
            System.out.println("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + username);
            return userRepository.findByUsername(username)
                    .orElseThrow(() -> {
                        System.out.println("üö® ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: " + username);
                        return new UsernameNotFoundException("User not found: " + username);
                    });
        };
    }

    // ‚úÖ Security Filter Chain ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á 2 Unit
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .cors(cors -> cors.configurationSource(corsConfigurationSource())) // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö CORS
                .csrf(csrf -> csrf.disable()) // ‚ùå ‡∏õ‡∏¥‡∏î CSRF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ REST API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        // .requestMatchers("/api/billing/**").permitAll()

                        // ‚úÖ API Public ‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ (‡∏à‡∏≤‡∏Å Unit 2)
                        .requestMatchers("/api/public/**").permitAll()

                        // ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Authentication (Login/Register)
                        .requestMatchers("/api/auth/login", "/api/auth/register").permitAll()

                        // ‚úÖ API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Authentication (‡∏à‡∏≤‡∏Å Unit 1)
                        .requestMatchers("/api/auth/check").authenticated()

                        // ‚úÖ API ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ USER ‡πÅ‡∏•‡∏∞ ADMIN ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
                        .requestMatchers("/api/user/**").hasAnyRole("USER", "ADMIN")

                        // ‚úÖ API ‡∏ó‡∏µ‡πà ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
                        .requestMatchers("/api/admin/**").hasRole("ADMIN")

                      


                        // ‚úÖ API ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
                        .requestMatchers("/api/**").permitAll() 

                        // ‚ùå ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏õ‡∏¥‡∏î‡∏Å‡∏±‡πâ‡∏ô‡∏´‡∏°‡∏î
                        .anyRequest().authenticated())
                .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    // ‚úÖ JWT Authentication Filter
    @Bean
    public JwtAuthenticationFilter jwtAuthenticationFilter() {
        return new JwtAuthenticationFilter(userDetailsService(), jwtService);
    }

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î BCryptPasswordEncoder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î AuthenticationProvider
    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService());
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î AuthenticationManager
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

    // ‚úÖ CORS Configuration ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("http://localhost:4200", "http://localhost:3000")); // ‚úÖ Angular & React
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}