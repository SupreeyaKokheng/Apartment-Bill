package com.apartment.management.service.impl;

import com.apartment.management.model.Billing;
import com.apartment.management.model.ElectricMeter;
import com.apartment.management.model.Room;
import com.apartment.management.model.WaterMeter;
import com.apartment.management.repository.BillingRepository;
import com.apartment.management.repository.RoomRepository;
import com.apartment.management.service.BillingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class BillingServiceImpl implements BillingService {

    @Autowired
    private BillingRepository billingRepository;

    @Autowired
    private RoomRepository roomRepository;
    @Override
    public List<Billing> generateBillingForCurrentMonth() {
        YearMonth targetMonth = YearMonth.now();
        String monthString = targetMonth.toString(); // "2025-02"
    
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        List<Room> rooms = roomRepository.findAll();
        List<Billing> updatedBillings = new ArrayList<>();
    
        for (Room room : rooms) {
            // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            List<Billing> existingBillings = billingRepository.findByRoomAndMonth(room, monthString);
    
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            Billing billing;
            if (!existingBillings.isEmpty()) {
                billing = existingBillings.get(0);
                System.out.println("üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á " + room.getRoomNumber());
            } else {
                billing = new Billing();
                billing.setRoom(room);
                billing.setRoomNumber(room.getRoomNumber()); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏¥‡∏•
                billing.setMonth(monthString);
                System.out.println("üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á " + room.getRoomNumber());
            }
    
            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            double waterMeter = room.getWaterMeters().stream()
                    .filter(meter -> YearMonth.from(meter.getRecordDate()).equals(targetMonth))
                    .map(WaterMeter::getMeterValue)
                    .reduce((first, second) -> second)
                    .orElse(0.0);
    
            double electricMeter = room.getElectricMeters().stream()
                    .filter(meter -> YearMonth.from(meter.getRecordDate()).equals(targetMonth))
                    .map(ElectricMeter::getMeterValue)
                    .reduce((first, second) -> second)
                    .orElse(0.0);
    
            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
            double waterUnitPrice = 8;
            double electricUnitPrice = 17;
    
            BigDecimal waterBill = BigDecimal.valueOf(waterMeter * waterUnitPrice);
            BigDecimal electricBill = BigDecimal.valueOf(electricMeter * electricUnitPrice);
            BigDecimal totalBill = waterBill.add(electricBill);
    
            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ö‡∏¥‡∏•
            billing.setWaterBill(waterBill);
            billing.setElectricBill(electricBill);
            billing.setTotalBill(totalBill);
    
            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•‡∏•‡∏á Database
            billingRepository.save(billing);
            updatedBillings.add(billing);
        }
    
        return updatedBillings;
    }
    
    @Override
    public List<Billing> getBillingRecordsForCurrentMonth() {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        // ‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2025
        return billingRepository.findAll(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å repository
    }

    @Override
    public Billing calculateBillingForRoom(Long roomId, String month) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÑ‡∏ü) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        Room room = roomRepository.findById(roomId).orElseThrow(() -> new RuntimeException("Room not found"));
        BigDecimal waterBill = BigDecimal.valueOf(100); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏£‡∏¥‡∏á
        BigDecimal electricBill = BigDecimal.valueOf(200); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏£‡∏¥‡∏á

        Billing billing = new Billing();
        billing.setRoom(room);
        billing.setMonth(month);
        billing.setWaterBill(waterBill);
        billing.setElectricBill(electricBill);
        billing.setTotalBill(waterBill.add(electricBill));

        return billing; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    }

    @Override
    public List<Billing> getBillingSummaryByMonth(String month) {
        // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (‡∏ö‡∏¥‡∏•‡∏£‡∏ß‡∏°)
        return billingRepository.findByMonth(month); // ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    }
}
