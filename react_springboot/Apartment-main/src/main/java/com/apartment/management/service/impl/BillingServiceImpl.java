package com.apartment.management.service.impl;

import java.math.BigDecimal;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.apartment.management.dto.BillingDTO;
import com.apartment.management.model.Billing;
import com.apartment.management.model.ElectricMeter;
import com.apartment.management.model.Room;
import com.apartment.management.model.WaterMeter;
import com.apartment.management.repository.BillingRepository;
import com.apartment.management.repository.FloorPriceRepository;
import com.apartment.management.repository.RoomRepository;
import com.apartment.management.service.BillingService;

@Service
public class BillingServiceImpl implements BillingService {

    @Autowired
    private BillingRepository billingRepository;

    @Autowired
    private RoomRepository roomRepository;

    @Autowired
    private FloorPriceRepository floorPriceRepository;

    @Override
    public List<Billing> generateBillingForCurrentMonth(String month) {
        YearMonth targetMonth = YearMonth.parse(month); // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ `month` ‡∏à‡∏≤‡∏Å UI
        YearMonth previousMonth = targetMonth.minusMonths(1); // ‚úÖ ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        String monthString = targetMonth.toString();
        String previousMonthString = previousMonth.toString(); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤

        System.out.println("üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: " + monthString + " (‡πÉ‡∏ä‡πâ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å " + previousMonthString + ")");

        List<Room> rooms = roomRepository.findAll();
        List<Billing> updatedBillings = new ArrayList<>();

        for (Room room : rooms) {
            List<Billing> existingBillings = billingRepository.findByRoomAndMonth(room, monthString);

            Billing billing;
            if (!existingBillings.isEmpty()) {
                billing = existingBillings.get(0);
            } else {
                billing = new Billing();
                billing.setRoom(room);
                billing.setRoomNumber(room.getRoomNumber());
                billing.setMonth(monthString);
                billing.setStatus("Unpaid"); // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Default
            }

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å FloorPriceRepository ‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            BigDecimal roomPrice = floorPriceRepository.findById(room.getFloor())
                    .map(floor -> BigDecimal.valueOf(floor.getPrice()))
                    .orElseThrow(() -> new RuntimeException("Floor price not found"));

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `previousMonth`
            double lastWaterMeter = room.getWaterMeters().stream()
                    .filter(meter -> YearMonth.from(meter.getRecordDate()).equals(previousMonth))
                    .map(WaterMeter::getMeterValue)
                    .reduce((first, second) -> second)
                    .orElse(0.0);

            double currentWaterMeter = room.getWaterMeters().stream()
                    .filter(meter -> YearMonth.from(meter.getRecordDate()).equals(targetMonth))
                    .map(WaterMeter::getMeterValue)
                    .reduce((first, second) -> second)
                    .orElse(0.0);
            // .orElse(lastWaterMeter); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

            double lastElectricMeter = room.getElectricMeters().stream()
                    .filter(meter -> YearMonth.from(meter.getRecordDate()).equals(previousMonth))
                    .map(ElectricMeter::getMeterValue)
                    .reduce((first, second) -> second)
                    .orElse(0.0);

            double currentElectricMeter = room.getElectricMeters().stream()
                    .filter(meter -> YearMonth.from(meter.getRecordDate()).equals(targetMonth))
                    .map(ElectricMeter::getMeterValue)
                    .reduce((first, second) -> second)
                    .orElse(0.0);
            // .orElse(lastElectricMeter); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

            // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            double waterUsage = calculateMeterUsage(lastWaterMeter, currentWaterMeter);
            double electricUsage = calculateMeterUsage(lastElectricMeter, currentElectricMeter);

            BigDecimal waterBill = BigDecimal.valueOf(waterUsage * 25);
            BigDecimal electricBill = BigDecimal.valueOf(electricUsage * 7);
            BigDecimal defaultParkingFee = BigDecimal.valueOf(400);
            BigDecimal defaultCableFee = BigDecimal.valueOf(100);
            BigDecimal defaultCommonFee = BigDecimal.valueOf(200);
            // ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            BigDecimal totalBill = roomPrice.add(waterBill).add(electricBill)
                    .add(defaultParkingFee)
                    .add(defaultCableFee)
                    .add(defaultCommonFee);
            // BigDecimal totalBill = waterBill.add(electricBill)
            // .add(defaultParkingFee)
            // .add(defaultCableFee)
            // .add(defaultCommonFee);

            System.out.println("üí∞ ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á " + room.getRoomNumber() + " = " + totalBill);

            billing.setRoomPrice(roomPrice);
            billing.setParkingFee(defaultParkingFee);
            billing.setCableFee(defaultCableFee);
            billing.setCommonFee(defaultCommonFee);

            billing.setWaterMeterStart(lastWaterMeter);
            billing.setWaterMeterEnd(currentWaterMeter);
            billing.setElectricMeterStart(lastElectricMeter);
            billing.setElectricMeterEnd(currentElectricMeter);
            billing.setWaterUsage(waterUsage);
            billing.setElectricUsage(electricUsage);
            billing.setWaterBill(waterBill);
            billing.setElectricBill(electricBill);
            billing.setTotalBill(totalBill);

            billingRepository.save(billing);
            updatedBillings.add(billing);
        }

        return updatedBillings;
    }

    @Override
    public List<Billing> getBillingRecordsForCurrentMonth() {
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        return billingRepository.findAll();
    }

    @Override
    public Billing calculateBillingForRoom(Long roomId, String month) {
        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        Room room = roomRepository.findById(roomId).orElseThrow(() -> new RuntimeException("Room not found"));
        List<Billing> billings = billingRepository.findByRoomAndMonth(room, month);

        if (billings.isEmpty()) {
            return null; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏¥‡∏•‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        }

        return billings.get(0);
    }

    @Override
    public List<Billing> getBillingSummaryByMonth(String month) {
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        return billingRepository.findByMonth(month);
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ 0000
    private double calculateMeterUsage(double lastMeter, double currentMeter) {
        return (currentMeter < lastMeter) ? (9999 - lastMeter) + currentMeter + 1 : currentMeter - lastMeter;
    }

    @Override
    public Billing updateBillingStatus(Long billingId, String status) {
        return billingRepository.findById(billingId).map(billing -> {
            billing.setStatus(status);
            return billingRepository.save(billing);
        }).orElse(null); // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡πâ return null (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error)
    }

    @Override
    public Billing createBilling(Billing billing) {
        if (billing.getStatus() == null || billing.getStatus().isEmpty()) {
            billing.setStatus("Unpaid"); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        }
        return billingRepository.save(billing);
    }

    // private final BillingRepository billingRepository;
    @Override
    public List<BillingDTO> getAllInvoices() {
        List<Billing> billings = billingRepository.findAllOrderByRoomNumber();
        System.out.println(billings);
        return billings.stream().map(BillingDTO::new).collect(Collectors.toList());
    }

    @Override
    public List<BillingDTO> getInvoicesByMonth(String month) {
        List<Billing> billings = billingRepository.findByMonth(month);

        return billings.stream()
                .map(BillingDTO::new)
                .collect(Collectors.toList());
    }

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    @Override
    public List<BillingDTO> getInvoicesForCurrentMonth() {
        String currentMonth = YearMonth.now().toString(); // üîπ ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô "YYYY-MM"
        return getInvoicesByMonth(currentMonth);
    }

}
